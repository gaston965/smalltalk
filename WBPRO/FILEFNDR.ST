"
******************************************************************************
Application : File Finder Example
Date        : Sep 13, 1996
Time        : 17:20:38

Introduction
============

File Finder Example

(c) ParcPlace-Digitalk, Inc. 1996
(c) Objectshare Systems, Inc. 1993-1996

For more information contact:

    ObjectShare, a division of ParcPlace-Digitalk
    3160 De La Cruz Blvd, Suite 205
    Santa Clara, CA 95054-2408
    (408) 970-7280 Phone
    (408) 970-7282 Fax
    http://www.objectshare.com



Description
===========

Classes : 
    FileFinderFile FileFinder BarGauge FileFinderCriteria 
    CPEntryField 

Methods : 
ListBox>>height
Directory>>fileFinderFormatted

******************************************************************************
"!

Object subclass: #FileFinderFile
  instanceVariableNames: 
    'fullPathName name size date '
  classVariableNames: ''
  poolDictionaries: ''!

ViewManager subclass: #FileFinder
  instanceVariableNames: 
    'validDrives chosenDrives sortCriterion filesFound selectedFileFound searchCriteria nameCheckBox nameComboBox nameEntryField sizeCheckBox minSizeEntryField maxSizeEntryField dateCheckBox firstDateEntryField lastDateEntryField findButton gauge '
  classVariableNames: 
    'SizeWidth NameWidth DateWidth '
  poolDictionaries: 
    'ColorConstants WBConstants '!

SubPane subclass: #BarGauge
  instanceVariableNames: 
    'fullValue currentValue '
  classVariableNames: ''
  poolDictionaries: 
    'ColorConstants WBConstants '!

Object subclass: #FileFinderCriteria
  instanceVariableNames: 
    'whereInPattern namePattern minSize maxSize firstDate lastDate '
  classVariableNames: ''
  poolDictionaries: ''!

EntryField subclass: #CPEntryField
  instanceVariableNames: 
    'justSetContents '
  classVariableNames: ''
  poolDictionaries: 
    'WBConstants VirtualKeyConstants CharacterConstants '!




!FileFinderFile class methods ! !



!FileFinderFile methods !

date

        ^date!
  
date: aDate

        date := aDate!
   
fullPathName

        ^fullPathName!
  
fullPathName: aString

        fullPathName := aString!
   
name

        ^name!
  
name: aString

        name := aString!
   
size

        ^size!
  
size: anInteger

        size := anInteger!
   
validDate: aFileFinderCriteria

    ^(date >= aFileFinderCriteria firstDate) and: [
        date <= aFileFinderCriteria lastDate
    ].!

validFile: aFileFinderCriteria

   ^(self validFileName: aFileFinderCriteria) and: [
        (self validDate: aFileFinderCriteria) and: [
            self validSize: aFileFinderCriteria
        ].
    ].!
  
validFileName: aFileFinderCriteria

        | whereInPattern namePattern thePattern thePoint |

    whereInPattern := aFileFinderCriteria whereInPattern.
    namePattern := aFileFinderCriteria namePattern.
    
    namePattern isEmpty ifTrue: [
        ^true
    ].

    thePattern := Pattern new: namePattern asLowerCase.
    thePoint := thePattern match: (self name) index: 1.

        "if thePoint is nil, then there was no matching.  otherwise,
         the x value is where thePattern begins to match the
         name, and the y value is where it stops matching."
    
    thePoint isNil ifTrue: [ ^false ].

    whereInPattern = 'contains' ifTrue: [ ^true ].

    (whereInPattern = 'starts with') & (thePoint x = 1) ifTrue: [ ^true ].

    (whereInPattern = 'ends with') & (thePoint y = self name size) ifTrue: [ ^true ].
    
    (whereInPattern = 'matches') & (thePoint x = 1) & (thePoint y = (self name size)) ifTrue: [ ^true ].

    ^false!
 
validSize: aFileFinderCriteria

    ^(size >= aFileFinderCriteria minSize) and: [
        size <= aFileFinderCriteria maxSize
    ].! !



!FileFinder class methods !
  
wbCreated


    ^true! !



!FileFinder methods !

chosenFilePathContents: aPane

    selectedFileFound isNil ifFalse: [
        aPane contents: selectedFileFound fullPathName
    ]!
 
close: aPane

    "Generated by WindowBuilder for a pane callback."!
  
countDirsInDirectory: theDir

    | subs cnt |

    subs := theDir subdirectories.
    cnt := subs size.

  "recurse to subdirectories"
    subs do: [ :subdirArray |
        cnt := cnt + (self countDirsInDirectory: (
            Directory pathName:
                (String with: theDir drive), ':', (subdirArray at: 1)
        ))
    ].

    ^cnt!
  
criteriaCheckBoxClicked: aPane

    self updateFindButton.!
   
diskLBContents: aPane

    aPane contents: validDrives.!
  
drawItem: aPane

    |  drawIndex
        namePoint sizePoint datePoint
        left sizeLength file
    |


    left := 3 @ (aPane drawBox bottom up: 3).

    drawIndex := aPane drawIndex.
    file := filesFound at: drawIndex.

    sizeLength := (aPane pen font stringWidth: file size asString) + 10.

    sortCriterion = 'name' ifTrue: [
        namePoint := left.
        sizePoint := left right: NameWidth + SizeWidth - sizeLength.
        datePoint := left right: (NameWidth + SizeWidth).
    ] ifFalse: [
        sortCriterion = 'size' ifTrue: [
            sizePoint := left right: SizeWidth - sizeLength.
            namePoint := left right: SizeWidth.
            datePoint := left right: SizeWidth + NameWidth.
        ] ifFalse: [
            sortCriterion = 'date' ifTrue: [
                datePoint := left.
                namePoint := left right: DateWidth.
                sizePoint := left right: DateWidth + NameWidth + SizeWidth  - sizeLength.
            ].
        ].
    ].

    aPane pen
        displayText: file name at: namePoint;
        displayText: file size asString at: sizePoint;
        displayText: file date formPrint at: datePoint.!
   
driveWasSelected: aPane

    chosenDrives := aPane selections collect: [ :index |
        validDrives at: index.
    ].
    self updateFindButton.!

exit: aPane

    self close!
  
fileSelected: aPane

    selectedFileFound := (filesFound select: [:f | f fullPathName = aPane selectedItem ]) first.

    self changed: #chosenFilePathContents:!
  
filesFoundHeaderContents: aPane

    sortCriterion = 'size' ifTrue: [
        aPane contents: 'Size (bytes)  Name                       Modified'
    ] ifFalse: [
        sortCriterion = 'date' ifTrue: [
            aPane contents: 'Modified   Name                        Size (bytes)'
        ] ifFalse: [
            aPane contents: 'Name                  Size (bytes)      Modified'
        ].
    ].!
  
filesFoundLBContents: aPane

    "First change filesFound by sorting them according to
      the sortCriterion value."

    | sortBlock |

    filesFound isNil ifTrue: [ ^self ].


    sortCriterion = 'date' ifTrue: [
        sortBlock := [:a :b | a date > b date].
    ] ifFalse: [
        sortCriterion = 'size' ifTrue: [
            sortBlock := [:a :b | a size > b size].
        ] ifFalse: [
            sortBlock := [:a :b | a name <= b name].
        ].
    ].

    filesFound := (filesFound asSortedCollection: sortBlock) asOrderedCollection.

    aPane contents: (filesFound collect: [:ffFile | ffFile fullPathName] ).

    selectedFileFound isNil ifFalse: [
        aPane selectItem: selectedFileFound name.
    ].!
 
findClicked: aPane

  "reset the file information part of interface"
    filesFound := OrderedCollection new.
    selectedFileFound := nil.
    self changed: #filesFoundLBContents:.
    self changed: #chosenFilePathContents:.

  "update the searchCriteria model"
    self updateSearchCriteria.

    CursorManager execute change.
    gauge
        fullValue: 0;
        fullValue: self totalDirectoryCount.
    CursorManager normal change.

    chosenDrives do: [ :drive |
        self searchFilesInDir: (Directory pathName: drive)
    ].


  "update the user interface to reflect new model"
    self changed: #filesFoundLBContents:.!

initialize

    super initialize.

    "Initialize model instance variables."
        searchCriteria := FileFinderCriteria new.
        sortCriterion := 'name'.

        self setValidDrives.
        chosenDrives :=  validDrives.


    SizeWidth := TextFont stringWidth: 'WWWWWW'.
    NameWidth := TextFont stringWidth: 'WWWWWWWW'.
    DateWidth := TextFont stringWidth: 'WWWWW'.!
   
initWindow

    "Initialize subpane instance variables."
        gauge := self paneNamed: 'gauge'.
        findButton := self paneNamed: 'findButton'.
        dateCheckBox := self paneNamed: 'dateCheckBox'.
        firstDateEntryField := self paneNamed: 'firstDateEntryField'.
        lastDateEntryField := self paneNamed: 'lastDateEntryField'.
        maxSizeEntryField := self paneNamed: 'maxSizeEntryField'.
        minSizeEntryField := self paneNamed: 'minSizeEntryField'.
        nameCheckBox := self paneNamed: 'nameCheckBox'.
        nameComboBox := self paneNamed: 'nameComboBox'.
        nameEntryField := self paneNamed: 'nameEntryField'.
        sizeCheckBox := self paneNamed: 'sizeCheckBox'.

    findButton disable.
    (self paneNamed: 'diskLB') selectItem: validDrives first.

    "Initialize search criteria panes."
    firstDateEntryField contents: searchCriteria firstDate asString.
    lastDateEntryField contents: searchCriteria lastDate asString.
    maxSizeEntryField contents: searchCriteria maxSize asString.
    minSizeEntryField contents: searchCriteria minSize asString.
    nameEntryField contents: searchCriteria namePattern.
    nameComboBox
        contents: #('contains' 'starts with' 'ends with' 'matches');
        selectItem: 'contains'.!

nameCriteriaChanged: aPane

    nameCheckBox selection: (aPane contents notEmpty).
    self updateFindButton.!
   
open


     "WARNING!!  This method was automatically generated by
      WindowBuilder.  Code you add here which does not conform
      to the WindowBuilder API will probably be lost the next time
      you save your layout definition."

     | v |

    self addView: (
        v := self topPaneClass new
            owner: self;
            labelWithoutPrefix:  'File Finder';
            noSmalltalkMenuBar;
            viewName: 'mainView';
            framingBlock: ( FramingParameters new iDUE: 1344 @ 736; xC; yC; cRDU: (2 @ 696 rightBottom: 1342 @ 2));
            pStyle: #(sysmenu titlebar minimize);
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 176 @ 32; lDU: 24 r: #left; rDU: 200 r: #left; tDU: 651 r: #top; bDU: 683 r: #top);
                    startGroup;
                    contents: 'Full Path:';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 136 @ 37; lDU: 52 r: #left; rDU: 188 r: #left; tDU: 322 r: #top; bDU: 358 r: #top);
                    startGroup;
                    contents: 'Sort By:';
                    yourself
            );
            addSubpane: (
                GroupBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 1056 @ 251; lDU: 244 r: #left; rDU: 1300 r: #left; tDU: 45 r: #top; bDU: 296 r: #top);
                    startGroup;
                    contents: 'Search Files By';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 746 @ 34; lDU: 246 r: #left; rDU: 992 r: #left; tDU: 325 r: #top; bDU: 358 r: #top);
                    startGroup;
                    when: #getContents perform: #filesFoundHeaderContents:;
                    contents: '';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 148 @ 32; lDU: 484 r: #left; rDU: 632 r: #left; tDU: 230 r: #top; bDU: 262 r: #top);
                    startGroup;
                    contents: 'between';
                    yourself
            );
            addSubpane: (
                BarGauge new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 172 @ 56; lDU: 1062 r: #left; rDU: 1234 r: #left; tDU: 530 r: #top; bDU: 586 r: #top);
                    paneName: 'gauge';
                    startGroup;
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 72 @ 32; lDU: 936 r: #left; rDU: 1008 r: #left; tDU: 230 r: #top; bDU: 262 r: #top);
                    startGroup;
                    contents: 'and';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 634 @ 32; lDU: 244 r: #left; rDU: 878 r: #left; tDU: 651 r: #top; bDU: 683 r: #top);
                    startGroup;
                    when: #getContents perform: #chosenFilePathContents:;
                    contents: '';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 96 @ 32; lDU: 536 r: #left; rDU: 632 r: #left; tDU: 165 r: #top; bDU: 197 r: #top);
                    startGroup;
                    contents: 'from:';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 46 @ 35; lDU: 950 r: #left; rDU: 996 r: #left; tDU: 165 r: #top; bDU: 200 r: #top);
                    startGroup;
                    contents: 'to:';
                    yourself
            );
            addSubpane: (
                StaticText new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 162 @ 66; lDU: 44 r: #left; rDU: 206 r: #left; tDU: 48 r: #top; bDU: 114 r: #top);
                    centered;
                    startGroup;
                    contents: 'Search
Disks:';
                    yourself
            );
            addSubpane: (
                Button new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 184 @ 61; lDU: 1056 r: #left; rDU: 1240 r: #left; tDU: 434 r: #top; bDU: 494 r: #top);
                    when: #clicked perform: #exit:;
                    contents: 'E~xit';
                    yourself
            );
            addSubpane: (
                Button new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 184 @ 59; lDU: 1054 r: #left; rDU: 1238 r: #left; tDU: 366 r: #top; bDU: 426 r: #top);
                    paneName: 'findButton';
                    defaultPushButton;
                    startGroup;
                    tabStop;
                    when: #clicked perform: #findClicked:;
                    contents: '~Find';
                    yourself
            );
            addSubpane: (
                ListBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 744 @ 272; lDU: 244 r: #left; rDU: 988 r: #left; tDU: 365 r: #top; bDU: 637 r: #top);
                    ownerDrawFixed;
                    startGroup;
                    tabStop;
                    when: #getContents perform: #filesFoundLBContents:;
                    when: #select perform: #fileSelected:;
                    when: #drawItem perform: #drawItem:;
                    yourself
            );
            addSubpane: (
                CPEntryField new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 242 @ 38; lDU: 1014 r: #left; rDU: 1264 r: #left; tDU: 226 r: #top; bDU: 274 r: #top; indent: 3 @ 4);
                    paneName: 'lastDateEntryField';
                    startGroup;
                    tabStop;
                    yourself
            );
            addSubpane: (
                CPEntryField new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 242 @ 38; lDU: 1014 r: #left; rDU: 1264 r: #left; tDU: 158 r: #top; bDU: 206 r: #top; indent: 3 @ 4);
                    paneName: 'maxSizeEntryField';
                    startGroup;
                    tabStop;
                    yourself
            );
            addSubpane: (
                CPEntryField new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 242 @ 38; lDU: 1014 r: #left; rDU: 1264 r: #left; tDU: 96 r: #top; bDU: 141 r: #top; indent: 3 @ 4);
                    paneName: 'nameEntryField';
                    startGroup;
                    tabStop;
                    when: #textChanged perform: #nameCriteriaChanged:;
                    yourself
            );
            addSubpane: (
                CPEntryField new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 272 @ 38; lDU: 644 r: #left; rDU: 924 r: #left; tDU: 224 r: #top; bDU: 272 r: #top; indent: 3 @ 4);
                    paneName: 'firstDateEntryField';
                    startGroup;
                    tabStop;
                    yourself
            );
            addSubpane: (
                CPEntryField new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 272 @ 38; lDU: 644 r: #left; rDU: 924 r: #left; tDU: 158 r: #top; bDU: 206 r: #top; indent: 3 @ 4);
                    paneName: 'minSizeEntryField';
                    startGroup;
                    tabStop;
                    yourself
            );
            addSubpane: (
                ComboBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 280 @ 187; lDU: 644 r: #left; rDU: 924 r: #left; tDU: 94 r: #top; bDU: 282 r: #top);
                    paneName: 'nameComboBox';
                    dropDownList;
                    startGroup;
                    tabStop;
                    yourself
            );
            addSubpane: (
                CheckBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 148 @ 45; lDU: 296 r: #left; rDU: 444 r: #left; tDU: 224 r: #top; bDU: 269 r: #top);
                    paneName: 'dateCheckBox';
                    startGroup;
                    tabStop;
                    when: #clicked perform: #criteriaCheckBoxClicked:;
                    contents: 'Date';
                    yourself
            );
            addSubpane: (
                CheckBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 132 @ 43; lDU: 296 r: #left; rDU: 428 r: #left; tDU: 162 r: #top; bDU: 205 r: #top);
                    paneName: 'sizeCheckBox';
                    startGroup;
                    tabStop;
                    when: #clicked perform: #criteriaCheckBoxClicked:;
                    contents: 'Size';
                    yourself
            );
            addSubpane: (
                CheckBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 166 @ 40; lDU: 296 r: #left; rDU: 462 r: #left; tDU: 94 r: #top; bDU: 134 r: #top);
                    paneName: 'nameCheckBox';
                    startGroup;
                    tabStop;
                    when: #clicked perform: #criteriaCheckBoxClicked:;
                    contents: 'Name';
                    yourself
            );
            addSubpane: (
                ComboBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 200 @ 157; lDU: 24 r: #left; rDU: 224 r: #left; tDU: 365 r: #top; bDU: 522 r: #top);
                    dropDownList;
                    startGroup;
                    tabStop;
                    when: #getContents perform: #sortCriterionCBContents:;
                    when: #select perform: #sortCriterionSelected:;
                    yourself
            );
            addSubpane: (
                MultipleSelectListBox new
                    owner: self;
                    framingBlock: ( FramingParameters new iDUE: 168 @ 134; lDU: 40 r: #left; rDU: 208 r: #left; tDU: 120 r: #top; bDU: 254 r: #top);
                    paneName: 'diskLB';
                    startGroup;
                    tabStop;
                    when: #getContents perform: #diskLBContents:;
                    when: #select perform: #driveWasSelected:;
                    yourself
            );
        yourself
    ).

    self openWindow!
   
searchFilesInDir: theDir

    "Add the files that match the searchCriteria in theDir
      to filesFound model."

   |  driveString |

    driveString := String with: theDir drive with: $:.


    theDir fileFinderFormatted do: [ :file |
        (file validFile: searchCriteria) ifTrue: [
            filesFound add: file
        ].
    ].

    gauge incrementValue.

  "recurse to subdirectories"
    theDir subdirectories do: [ :subdirArray |
        self searchFilesInDir: (
            Directory pathName: driveString, (subdirArray at: 1)
        )
    ]!
   
setValidDrives

        "Initialize the validDrives model instance variable to
         an array that contains the characters of the valid drives
         for this machine."

        validDrives :=  'cdefghijklmnopqrstuvwxyz' asArray select: [ :letter |
            (Directory pathName:  (String with: letter), ':\') validDrive
        ].

        validDrives := validDrives collect: [:letter | String with: letter with: $: ].!
   
sortCriterionCBContents: aPane

    aPane
        contents: #('name' 'size' 'date');
        selectItem: sortCriterion.!

sortCriterionSelected: aPane

    aPane selectedItem = sortCriterion ifFalse: [
        sortCriterion := aPane selectedItem.

        self
            changed: #filesFoundHeaderContents:;
            changed: #filesFoundLBContents:.
    ].!

totalDirectoryCount


    | cnt |

    cnt := 1.

    chosenDrives do: [ :drive |
        cnt := cnt + (self countDirsInDirectory: (
            Directory pathName:  (drive asString), '\'
        )).
    ].

    ^cnt!
  
updateFindButton

    (chosenDrives notNil and: [ chosenDrives notEmpty ]) & (
        dateCheckBox selection |
        sizeCheckBox selection |
        nameCheckBox selection
    ) ifTrue: [
        findButton enable.
    ] ifFalse: [
        findButton disable.
    ].!
   
updateSearchCriteria

    searchCriteria := FileFinderCriteria new.

    nameCheckBox selection ifTrue: [
        searchCriteria
            whereInPattern: nameComboBox selectedItem;
            namePattern: nameEntryField contents
     ].

    sizeCheckBox selection ifTrue: [
        searchCriteria
            minSize: (minSizeEntryField contents asInteger);
             maxSize: (maxSizeEntryField contents asInteger)
    ].

    dateCheckBox selection ifTrue: [
        searchCriteria
            firstDate: (Date fromString: firstDateEntryField contents);
            lastDate: (Date fromString: lastDateEntryField contents)
    ]! !



!BarGauge class methods ! !



!BarGauge methods !
 
defaultStyle

    ^WsChild   |
    WsVisible |
    WsClipsiblings |
    WsClipchildren!

display

    | x r |

    r := 0@0 extent: self extent.

    self pen
        place: r origin;
        box: r corner.

    fullValue = 0 ifFalse: [
        x := ((currentValue / fullValue * (self width - 2)) truncated).
        self pen
            fill: (1@1 extent: x  @ (self height - 2)) color: ClrBlue;
            fill: ((x + 1)@1 extent: (self width - 2 - x) @ (self height - 2)) color: ClrWhite.
    ] ifTrue: [
        self pen fill: ((0@0 extent: self extent) insetBy: 1) color: ClrWhite.
    ].!
 
fullValue: size

    fullValue := size.
    currentValue := 0.
    self display.!
   
getGraphicsTool
        "We use a pen here, not a textTool"
    | dc |

    dc := self getDC.
    ^graphicsTool := Pen forDC: dc medium: self!
 
incrementValue

    currentValue := currentValue + 1.
    currentValue > fullValue ifTrue: [
        currentValue := fullValue.
    ].
    self display.!
 
initialize

    currentValue := 0.
    fullValue := 0.
    super initialize.!
   
updateSliders! !



!FileFinderCriteria class methods !
 
new

        ^super new initialize! !



!FileFinderCriteria methods !

firstDate

        ^firstDate!

firstDate: aDate

        firstDate := aDate!
 
initialize

        "sets the default values for the search criteria"

        firstDate := Date fromString: '01-01-00'.
        lastDate := Date today.
        maxSize := 9999999.
        minSize := 0.
        namePattern := ''.
        whereInPattern := 'contains'.!
   
lastDate

        ^lastDate!
  
lastDate: aDate

        lastDate := aDate!
   
maxSize

        ^maxSize!

maxSize: anInteger

        maxSize := anInteger!
 
minSize

        ^minSize!

minSize: anInteger

        minSize := anInteger!
 
namePattern

        ^namePattern!

namePattern: aString

        namePattern := aString!
 
whereInPattern

        ^whereInPattern!
  
whereInPattern: aString

        whereInPattern := aString! !



!CPEntryField class methods !

supportedEvents

    | se |

    se := super supportedEvents.
    (se includes: #loosingFocus) ifTrue: [
        se
            remove: #loosingFocus;
            add: #losingFocus.
    ].

    ^se! !



!CPEntryField methods !
  
asyncControlEvent: msgId

    msgId = EnChange ifTrue: [
        justSetContents ifTrue: [
            justSetContents := false.
       ] ifFalse: [
            justSetContents := false.
            self event: #textChanged.
            ^nil
        ].
    ].!
  
calcRectFromFramingBlock: aRectangle oldExtent: oldExtent

    | newRect |

    framingBlock isRectangle ifTrue: [
        newRect := framingBlock.
    ] ifFalse: [
        framingBlock isContext ifTrue: [
            newRect := (framingBlock value: aRectangle).
        ] ifFalse: [
            newRect := framingBlock rectangleIn: aRectangle extent oldExtent: oldExtent.
        ].
    ].

    ^newRect!
 
initialize

    super initialize.
    justSetContents := false.!
 
modified

    "This entire subclass was created to get around the
      automatic 'Save changes?' dialog that pops up when
      you attempt to close a window containing a modified
      EntryField.  You cannot use #clearTextModified, as that
      is only sent to TextEdit/TextPanes, NOT EntryFields."

    ^false!
 
selectAll

    self setSelectionFrom: 0 to: self contents size!
   
setContents: aString

    self contents = aString ifTrue: [ ^self ].
    justSetContents := true.
    super contents: aString.
    Notifier cleanUpAllMessages.!
   
wmKillfocus: wParam with: lParam
        "Private - Validate Input before losing focus"
    |newValue|

    newValue := self windowText.
    self losingFocus.
    self event: #losingFocus.
    value := newValue.
    self setSelectionFrom: 0 to: 0.

    ^nil! !


!ListBox methods !
height

    "Modified by OSI for FileFinder."

    #modifiedByOSI.
    height isNil ifTrue: [
        height := self defaultFont height.
    ].

     ^height! !

!Directory methods ! 
fileFinderFormatted

    | answer fileEntries aFileFinderFile fullPathName date |

    #addedByOSI.
    fileEntries := self contents: '*.*'.
    answer := OrderedCollection new: fileEntries size.
    fullPathName := (String with: (self drive)), (self pathName).

    fileEntries do: [ :each |
        date := Directory extractDateFrom: each.
        (date year < 100) ifTrue: [
            date := Date newDay: date dayOfMonth  month: date monthName year: date year + 1900
        ].
        aFileFinderFile := FileFinderFile new
            fullPathName: fullPathName;
            name: (Directory extractFileNameFrom: each);
            size: (Directory extractSizeFrom: each);
            date: date.
        answer add: aFileFinderFile.
    ].
    ^answer!   !
"construct application"
((Smalltalk at: #CPApplication ifAbsent: [])
    isKindOf: Class) ifTrue: [
        ((Smalltalk at: #CPApplication) for:'File Finder Example')
            addClass: FileFinderFile;
            addClass: FileFinder;
            addClass: BarGauge;
            addClass: FileFinderCriteria;
            addClass: CPEntryField;
            addMethod: #height forClass: ListBox;
            addMethod: #fileFinderFormatted forClass: Directory;
            comments: 'File Finder Example

(c) ParcPlace-Digitalk, Inc. 1996
(c) Objectshare Systems, Inc. 1993-1996

For more information contact:

    ObjectShare, a division of ParcPlace-Digitalk
    3160 De La Cruz Blvd, Suite 205
    Santa Clara, CA 95054-2408
    (408) 970-7280 Phone
    (408) 970-7282 Fax
    http://www.objectshare.com
';
            initCode: nil;
            finalizeCode: nil;
            fileName: 'FILEFNDR.ST';
            startUpCode: nil]!
