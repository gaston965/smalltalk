
1. Convertir una cadena a mayúsculas y minúsculas.
| ingreso lista |

ingreso:= (Prompter prompt: 'Ingrese algo ' default:' ' ) .

lista:=OrderedCollection new.

1 to:(ingreso size) do:[:i| ( (ingreso at:i ) isLowerCase ) ifTrue:[ lista add:( (ingreso at:i ) asUpperCase) ].
                                    ( (ingreso at:i ) isUpperCase ) ifTrue:[ lista add:(ingreso at:i) asLowerCase].].

MessageBox message:' resultado', lista asString.       

------------------------------------------------------------------------------------------------------------------------------
2. Dada una cadena de entrada, devolver otra en la que los caracteres en mayúsculas
hayan sido cambiados por caracteres en minúsculas y viceversa.

| ingreso lista |

ingreso:= (Prompter prompt:'ingrese algo' default:'') asArrayOfSubstrings.
lista:= OrderedCollection new.
1 to: ( ingreso size) do:[:i|  1 to: ( (ingreso at:i) size ) do:[:j| ( ( (ingreso at:i) at: j) isLowerCase ) ifTrue:[ lista add: ( (ingreso at:i) at:j) asUpperCase ].
                                                                                               ( ( (ingreso at:i) at: j) isUpperCase ) ifTrue:[ lista add: ( (ingreso at:i) at:j) asLowerCase ].  ].]. ^lista



                            
----------------------------------------------------------------------------------------------------------------------------------
3. vericar si es un palindromo

| lista2 ingreso lista |

ingreso:= (Prompter prompt:'ingrese algo ' default:'') .

(ingreso = (ingreso reversed)) ifTrue:[MessageBox message:'es palindromo']
                                                 ifFalse:[MessageBox message:'no es palindromo'].  

---------------------------------------------------------------------------------------------------------------------------------------------               
4. Contar la cantidad de vocales de una frase.     

| ingreso cont |

ingreso:=(Prompter prompt:'ingrese algo' default:'').
                                      cont:=0.
1 to: (ingreso size) do:[:i| ((ingreso at:i) isVowel) ifTrue:[ cont:= cont + 1 ].].
MessageBox message:'la cantidad de vocales de ', ingreso asString , ' son ', cont asString.
 
------------------------------------------------------------------------------------------------------------------------------------------------------

5. Ingresar dos cadenas y devolver una 3º que contenga los elementos de las 2
anteriores pero intercalados.

|ingreso ingreso2 cont|

ingreso:= (Prompter prompt:'ingrese algo' default:'') .
" ingreso2:=(Prompter prompt:'ingrese algo mas' default:''). "
   cont:=0.
1 to: ( ingreso size ) do:[:i| ( (ingreso at:i)==(( 32 asciiValue)) ifTrue:[ cont:= cont +1.]. ]. ^cont
------------------------------------------------------------------------------------------------------------------------------------------------------------

| ingreso cociente resto inco acumulando | 

ingreso:=(Prompter prompt:'ingrese un numero' default:'')asInteger.
acumulando:=OrderedCollection new.
inco:=0.
[ingreso > 2] whileTrue:[ inco:=inco+1. ingreso:=  ( ingreso // 2).resto:=(ingreso \\ 2). acumulando at:(inco) put:(resto asString).].^acumulando
                                                                                                                
-------------------------------------------------------------------------------


|ingresoTexto ingresoLetra contLetras|

ingresoTexto:=(UIManager default request:'ingrese la frase a contar') substrings.
ingresoLetra:=(UIManager default request:'ingrese la letra que desea buscar') .
contLetras:=0.

1 to: (ingresoTexto size) do:[:i| 1 to: ((ingresoTexto at:i) size) do:[:j| ( ((ingresoTexto at:i) at:j) = (ingresoLetra at:1) ) ifTrue:[ contLetras:=contLetras + 1.].  ].].^contLetras


-----------------------------------------------------------------------------------


|ingresoTexto ingresoLetra contLetras|

ingresoTexto:=(UIManager default request:'ingrese la frase a contar') substrings.
ingresoLetra:=(UIManager default request:'ingrese la letra que desea buscar') .
contLetras:=0.

1 to: (ingresoTexto size) do:[:i| 1 to: ((ingresoTexto at:i) size) do:[:j| ( ((ingresoTexto at:i) at:j) = (ingresoLetra at:1) ) ifTrue:[ contLetras:=contLetras + 1.].  ].].^contLetras
------------------------------------------------------------------------------------------

9. A partir de una frase ingresada por el usuario contar la cantidad de palabras que
empiezan con una determinada letra (también ingresada por el usuario).                          

                          
|ingresoTexto ingresoLetra contLetras contPal|

ingresoTexto:=(UIManager default request:'ingrese la frase a contar') substrings.
ingresoLetra:=(UIManager default request:'ingrese la letra que desea buscar') .
contLetras:=0.
contPal:=0.
1 to:(ingresoTexto size) do:[:i| (((ingresoTexto at:i) at:1)=(ingresoLetra at:1)) ifTrue:[contPal:=contPal+1.].].

UIManager default inform:'la cantidad de palabras que comienzan con ', (ingresoLetra at:1) , 'en la frase' , ingresoTexto.
--------------------------------------------------------------------------------------------------------

10. Ídem anterior, pero contar la cantidad de palabras que terminan con una letra
determinada. 

|ingresoTexto ingresoLetra contLetras contPal|

ingresoTexto:=(UIManager default request:'ingrese la frase a contar') substrings.
ingresoLetra:=(UIManager default request:'ingrese la letra que desea buscar') .
contLetras:=0.
contPal:=0.
1 to:(ingresoTexto size) do:[:i| (((ingresoTexto at:i) at:(ingresoTexto  at:i) size)=(ingresoLetra at:1)) ifTrue:[contPal:=contPal+1.].].^contPal 

--------------------------------------------------------------------------------------------------------------------------

a. Dado un texto, se pide:
i. la posición inicial de la palabra más larga,
ii. la longitud del texto,
iii. cuantas palabras con una longitud entre 8 y 16 caracteres poseen
más de tres veces la vocal ‘a’.

| cona conpala posicionInicial may ingreso  |

ingreso:=(UIManager default request:'ingrese un texto') substrings.
may:=0.
posicionInicial:=0.
conpala:=0.
1 to: (ingreso size) do:[:i|cona:=0.  (( (ingreso at:i) size )> may) ifTrue:[  may:= ( (ingreso at:i) size ). posicionInicial:=i. ]. 
((((ingreso at:i ) size )>8 ) |(((ingreso at:i ) size )<16 )) ifTrue:[ 1 to: ((ingreso at:i) size) do:[:j| ( ((ingreso at:i) at:j)=$a)ifTrue:[cona:=cona +1. ].]  . (cona>3) ifTrue:[conpala:=conpala +1]. ].].
Transcript show: 'el texto ingresado es', ingreso asString.
Transcript show:'la posicion inicial de la palabra mas larga del texto es' , posicionInicial asString , 'la longitud del texto es' , (ingreso size) asString , 'la cantidad de palabras con una longitud mayor a 8 y menor que 16 con mas de tres veces la vocal a es', conpala asString.

-----------------------------------------------------------------------------------------------------------------------------------
12. Dado un texto terminado en punto, determinar cuál es la vocal que aparece con
mayor frecuencia.



| pos j i max contadorPosiciones ingreso arregloVocales |

ingreso:=(UIManager default request:'ingrese un texto').
arregloVocales:= #($a $e $i $o $u).
"contadorPosiciones:= Array new:5."
contadorPosiciones:=#(0 0 0 0 0).

i:=1.
max:=0.
[(i<=(ingreso size)) and:[((ingreso at:i)~=$.)]] whileTrue:[
       
 1 to:(arregloVocales size) do:[:l| ((arregloVocales at:l) = (ingreso at:i)) ifTrue:[ contadorPosiciones at:l put:( (contadorPosiciones at:l) +1)  ].]. 	
	
	
i:=i+1.	
	
].

1 to: ( contadorPosiciones size ) do:[:m|  (((contadorPosiciones at:m)>max)) ifTrue:[max:= (contadorPosiciones at:m). pos:=m.].].

UIManager default inform:'la vocal que mas se repite es ', (arregloVocales at:pos) asString , 'con', max asString.


------------------------------------------------------------------------------------------------------------------------------------------

" 13. Dado un texto terminado en ‘/’ se pide determinar cuántas veces aparece
determinada letra, leída de teclado. 


| ingresoLetra pos j i max contadorPosiciones ingreso arregloVocales |

ingreso:=(UIManager default request:'ingrese un texto').
" arregloVocales:= #($a $e $i $o $u)."
ingresoLetra:=(UIManager default request:'ingrese la letra deseada').
"contadorPosiciones:=#(0 0 0 0 0)."

i:=1.
max:=0.

[(i<=(ingreso size)) and:[((ingreso at:i)~=$/)]] whileTrue:[
       
 " 1 to:(arregloVocales size) do:[:l| ((arregloVocales at:l) = (ingreso at:i)) ifTrue:[ contadorPosiciones at:l put:( (contadorPosiciones at:l) +1)  ].]. 	
   	"
	 
	((ingreso at:i)= ( ingresoLetra at:1) )ifTrue:[ max:=max+1.].  
	
	i:=i+1.	
	
].

"1 to: ( contadorPosiciones size ) do:[:m|  (((contadorPosiciones at:m)>max)) ifTrue:[max:= (contadorPosiciones at:m). pos:=m.].].
"
UIManager default inform:'la letra ingresada ', ingresoLetra asString , 'se repite ', max asString. 


----------------------------------------------------------------------------------------------------------------------------------------